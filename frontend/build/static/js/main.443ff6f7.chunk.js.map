{"version":3,"sources":["components/Navbar.js","components/Backdrop.js","components/SideDrawer.js","redux/constants/productConstants.js","components/Product.js","screens/HomeScreen.js","redux/actions/productActions.js","redux/constants/cartConstant.js","redux/actions/cartActions.js","screens/ProductScreen.js","components/CartItem.js","screens/CartScreen.js","App.js","redux/reducers /cartReducers.js","redux/store.js","redux/reducers /productReducers.js","index.js"],"names":["Navbar","click","cartItems","useSelector","state","cart","className","to","reduce","qty","item","Number","onClick","Backdrop","show","SideDrawer","sideDrawerClass","push","join","GET_PRODUCTS_REQUEST","GET_PRODUCTS_SUCCESS","GET_PRODUCTS_FAIL","GET_PRODUCT_DETAILS_REQUEST","GET_PRODUCT_DETAILS_SUCCESS","GET_PRODUCT_DETAILS_FAIL","GET_PRODUCT_DETAILS_RESET","Product","imageUrl","name","price","description","productId","src","alt","substring","HomeScreen","dispatch","useDispatch","getProducts","products","loading","error","useEffect","type","actionTypes","axios","get","data","payload","response","message","map","product","_id","ADD_TO_CART","REMOVE_FROM_CART","addToCart","id","getState","countInStock","localStorage","setItem","JSON","stringify","ProductScreen","match","history","useState","setQty","productDetails","getProductDetails","params","value","onChange","e","target","Array","keys","x","CartItem","qtyChangeHandler","removeHandler","title","CartScreen","removeFromCart","length","toFixed","App","sideToggle","setSideToggle","exact","path","component","CART_INITIAL_STATE","reducer","combineReducers","action","existItem","find","filter","middleware","thunk","INITIAL_STATE","getItem","parse","store","createStore","composeWithDevTools","applyMiddleware","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.443ff6f7.chunk.js","sourcesContent":["import React from 'react'\nimport './Navbar.css'\nimport { Link } from 'react-router-dom'\n\n//redux \nimport { useSelector } from 'react-redux'\n\n\n\nconst Navbar = ({click}) => {\n  const cart = useSelector((state) => state.cart)\n  const { cartItems } = cart\n\n  const getCartCount = () => {\n    return cartItems.reduce((qty, item) => Number(item.qty) + qty, 0)\n  }\n \n  return (\n    <nav className='navbar'>\n        {/* {logo} */}\n        <div className='navbar__logo'>\n            <h2>Gearlandia</h2>\n        </div>\n\n        {/* {Links} */}\n        <ul className='navbar__links'>\n            <li>\n                <Link to = '/cart'  className='cart__link'>\n                  <i className=\" fa-solid fa-cart-shopping\"></i>\n                  \n\n                  <span>\n                    Cart     <span className='cartlogo__badge'>{getCartCount()}</span>\n                  </span>\n                \n                  \n                                    \n                </Link>\n            </li>\n            <li>\n              <Link to='/'  className='shop__link'>\n                  Shop\n              </Link>\n            </li>\n        </ul>\n\n        {/* {hamburger} */}\n        <div className='hamburger__menu' onClick={click}>\n          {/* onClick event triggers sideDrawer open and the backdrop open. */}\n          <div></div>\n          <div></div>\n          <div></div>\n        </div>\n\n    </nav>\n  )\n}\n\nexport default Navbar","import React from 'react'\nimport './Backdrop.css'\n\nconst Backdrop = ({show, click }) => {\n  return  show &&\n    // show is destructured prop {show} from state logic in App.js which defaults to false, will only show backdrop if we change state to true\n    <div className='backdrop' onClick={click}></div>\n    // onClick closes the sideDrawer  from the state in the App component.  setSideToggle\n  \n}\n\nexport default Backdrop","import React from 'react'\nimport './SideDrawer.css'\nimport { Link } from 'react-router-dom'\n\n//redux for cart count state updating\nimport { useSelector } from 'react-redux'\n\nconst SideDrawer = ({show , click }) => {\n//cart count state update\n  const cart = useSelector((state) => state.cart)\n  const { cartItems } = cart\n\n  const getCartCount = () => {\n    return cartItems.reduce((qty, item) => Number(item.qty) + qty, 0)\n  }\n\n    const sideDrawerClass = [\"sidedrawer\"]\n\n    // pushes a new style of \"show\" onto the sideDrawer array\n    if(show) {\n        sideDrawerClass.push('show')\n    }\n  return  <div className={sideDrawerClass.join(' ')}> \n    <ul className='sidedrawer__links' onClick={ click }>\n      <li >\n        <Link to='/cart'>\n        <i className='fa-sharp fa-solid fa-cart-shopping' ></i> \n       \n      <span>\n          Cart<span className='sidedrawer__cartbadge'>{getCartCount()}</span>\n      </span>\n\n        </Link>\n      </li>\n\n      <li>\n        <Link to='/'>Shop</Link>\n      </li>\n\n    </ul>\n  \n  \n  </div>\n  \n}\n\nexport default SideDrawer","\n//for actions to fetch all products for shop\nexport const GET_PRODUCTS_REQUEST = \"GET_PRODUCTS_REQUEST\"\nexport const GET_PRODUCTS_SUCCESS = \"GET_PRODUCTS_SUCCESS\"\nexport const GET_PRODUCTS_FAIL = \"GET_PRODUCTS_FAIL\"\n\n//for actions to fetch single products\nexport const GET_PRODUCT_DETAILS_REQUEST = \"GET_PRODUCT_DETAILS_REQUEST\"\nexport const GET_PRODUCT_DETAILS_SUCCESS = \"GET_PRODUCT_DETAILS_SUCCESS\"\nexport const GET_PRODUCT_DETAILS_FAIL = \"GET_PRODUCT_DETAILS_FAIL\"\nexport const GET_PRODUCT_DETAILS_RESET = \"GET_PRODUCT_DETAILS_RESET\"\n","import React from 'react'\nimport { Link } from 'react-router-dom'\n\nimport './Product.css'\n\nconst Product = ({ imageUrl, name, price, description, productId }) => {\n  return (\n      /* hard coded values for styling/testing */\n    <div className='product'>\n         <img src={ imageUrl }\n         alt = { name } />\n\n         <div className='product__info'>\n             <p className='info__name'>{ name } </p>\n             <p className='info__description'>\n                 {description.substring(0, 100)}...\n             </p>\n\n             <p className='info__price'>${price}</p>\n             \n             <Link to={`/product/${productId}`} className='info__button'>View Product</Link>\n         </div>\n    </div> \n  )\n}\n\nexport default Product","import React, { useEffect} from 'react'\nimport { useSelector, useDispatch} from 'react-redux'\n\n\n//actions \nimport { getProducts as listProducts } from '../redux/actions/productActions'\n//components\nimport Product from '../components/Product'\n\n//css styles\nimport './HomeScreen.css'\n\nconst HomeScreen = () => {\n\n    const  dispatch = useDispatch()\n\n    //get the prducts data from the state in the store\n    const getProducts = useSelector( state => state.getProducts)\n    const { products , loading, error } = getProducts\n\n    useEffect (() => {\n      dispatch(listProducts())\n    },[dispatch])\n\n\n  return (\n    <div className='homescreen'>\n        <h2 className='homescreen__title'> New Gear/Kit</h2>\n        {/* div below is where a products will show */}\n        <div className='homescreen__products'>\n          {loading ? (\n            <h2>Loading...</h2>\n          ): error ? (\n            <h2>{ error }</h2>\n          ): products.map((product) => <Product  \n                  productId={product._id} \n                  key={product._id}\n                  name={product.name}\n                  description={product.description}\n                  imageUrl={product.imageUrl}\n                  price={product.price}    />)}\n\n        </div>\n    </div>\n\n  )\n}\n\nexport default HomeScreen","import * as actionTypes from '../constants/productConstants'\n\nimport axios from 'axios'\n//for the home screen to display all products\nexport const getProducts = () => async ( dispatch ) => {\n    try {\n        dispatch({ type: actionTypes.GET_PRODUCTS_REQUEST})\n\n        const { data } = await axios.get('/api/products')\n\n        dispatch({\n            type: actionTypes.GET_PRODUCTS_SUCCESS,\n            payload: data\n        })\n        \n    } catch (error) {\n        dispatch({\n            type: actionTypes.GET_PRODUCTS_FAIL,\n            payload: error.response && error.response.data.message \n                ? error.response.data.message \n                : error.message\n        })\n        \n    }\n}\n//making a request to the productRoutes in the backend to get a specific product by its id \nexport const getProductDetails = ( id ) => async ( dispatch ) => {\n    try {\n        dispatch({ type: actionTypes.GET_PRODUCT_DETAILS_REQUEST})\n\n        const { data } = await axios.get(`/api/products/${id}`)\n\n        dispatch({\n            type: actionTypes.GET_PRODUCT_DETAILS_SUCCESS,\n            payload: data\n        })\n        \n    } catch (error) {\n        dispatch({\n            type: actionTypes.GET_PRODUCT_DETAILS_FAIL,\n            payload: error.response && error.response.data.message \n                ? error.response.data.message \n                : error.message\n        })\n        \n    }\n}\n\n//removes state if we switch screens\nexport const removeProductDetails = () => (dispatch) => {\n    dispatch({\n        type: actionTypes.GET_PRODUCT_DETAILS_RESET,\n    })\n}","//constants are best practice to avoid spelling mistakes in actions\n\nexport const ADD_TO_CART = \"ADD_TO_CART\";\nexport const REMOVE_FROM_CART = \"REMOVE_FROM_CART\";\nexport const RESET_CART = \"RESET_CART\"\n","// http requests to the backend to get the product details and add them to the cart\n\nimport *  as actionTypes from '../constants/cartConstant'\n\nimport axios from 'axios'\n//function takes the product id and the qty of that product id (dispatch and getState fucntion is from thunk)\nexport const addToCart = ( id, qty ) =>  async ( dispatch, getState ) => {\n    const { data }  = await axios.get(`/api/products/${id}`)\n                                                                //api/products = see productRoutes file in backend, routes folder.  \n    dispatch({\n        type: actionTypes.ADD_TO_CART,\n        payload: {\n            product: data._id,\n            name: data.name,\n            imageUrl: data.imageUrl,\n            price: data.price,\n            countInStock: data.countInStock,\n            qty\n        } // payload object {} is coming from the database \n    })\n\n    //save cart to local storage\n    localStorage.setItem('cart', JSON.stringify(getState().cart.cartItems))  //cart value is accessed from the store and the cartReducer\n}\n\nexport const removeFromCart = (id) => ( dispatch, getState ) => {\n    dispatch({\n        type:actionTypes.REMOVE_FROM_CART,\n        payload: id\n    })\n\n    //update local storage to remove the item\n    localStorage.setItem( 'cart' , JSON.stringify(getState().cart.cartItems))\n}\n\n\n","import React, {useState, useEffect} from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\n\n//actions\nimport { getProductDetails } from '../redux/actions/productActions'\nimport { addToCart } from '../redux/actions/cartActions'\n//css styles\nimport './ProductScreen.css'\n\n\nconst ProductScreen = ( {match, history} ) => {\n\n  const [qty, setQty] = useState(1)\n  const dispatch = useDispatch()\n\n  const productDetails = useSelector((state) => state.getProductDetails)\n\n  const { product ,loading, error } = productDetails\n\n  useEffect(() => {\n    if(product && match.params.id !== product._id) {\n      dispatch(getProductDetails(match.params.id))\n    }\n  }, [dispatch, match, product])\n\n  const addToCartHandler = () => {\n    dispatch(addToCart(product._id, qty ))\n    history.push(`/cart`)\n  }\n\n  return (\n\n    // hardcoded values need to be rendered dynamically - redux...completed on 01.02.23 by straub\n    <div className='productscreen'>\n      {loading ? (\n          <h2>Loading...</h2>\n      ): error ? (\n        <h2> { error }</h2>\n      ): (\n        <>\n         <div className='productscreen__left'>\n          <div className='image__left'>\n          <img src={product.imageUrl} alt={ product.name }/>\n          </div>\n          \n        <div className='info__left'>\n          <p className='name__left'> {product.name} </p>\n          <p className='price__left'> ${product.price} </p>\n          <p className='description__left'> {product.description} </p>\n\n        </div>\n\n    </div>\n\n    <div className='productscreen__right'>\n      <div className='info__right'>\n        <p>\n          Price: <span>${product.price}</span>\n        </p>\n        <p>\n          Status: <span>{product.countInStock > 0 ? \"In Stock\": \"Out of Stock\"} </span>\n        </p>\n        <p>\n          QTY\n          <select value={qty} onChange={(e) => setQty(e.target.value)}>\n           {[...Array(product.countInStock).keys()].map((x) => (\n             <option key={x+1} value={x+1}>{x+1}</option>\n           ))}\n          </select>\n        </p>\n        <p>\n          <button onClick={addToCartHandler} type='button' className='button__right'>Add to Cart</button>\n        </p>\n\n       </div>\n\n\n\n\n\n\n      </div>\n    </>\n    )}\n    </div>\n  )\n}   \n   \n \n        \n       \n  \n\n       \n  \n\n\nexport default ProductScreen","import React from 'react'\nimport { Link } from 'react-router-dom'\n\n//styles\nimport './CartItem.css'\n\n\n\nconst CartItem = ({ item, qtyChangeHandler, removeHandler }) => {\n  return (\n    <div className='cartitem'>\n        <div className='cartitem__image'>\n            <img src={ item.imageUrl}\n            alt={ item.name }/>\n        </div>\n\n        <Link to={`/product/${item.product}`} className='cartitem__name'>\n            <p>{ item.name }</p>\n        </Link>\n            <p className='cartitem__price'>${ item.price }</p>\n\n            <select className='cartitem__select' \n              value={ item.qty } \n              onChange={(e) => qtyChangeHandler(item.product, e.target.value)}>\n\n              {[...Array(item.countInStock).keys()].map((x) => (\n                  <option key={x+1} value={x+1}>{x+1}</option>\n              ))}\n            </select>\n\n            <button className='cartitem__deleteBtn' title='Delete from Cart' onClick={() => removeHandler(item.product)}>\n                <i className='fas fa-trash'></i>\n            </button>\n     </div>\n\n  )\n}\n\nexport default CartItem","import React from 'react'\nimport { Link } from 'react-router-dom'\n\n//actions\nimport {addToCart, removeFromCart } from '../redux/actions/cartActions' \n\n//redux\nimport { useSelector, useDispatch } from 'react-redux'\n //css styles\nimport './CartScreen.css'\n\n//components:\nimport CartItem from '../components/CartItem'\n\nconst CartScreen = () => {\n  const dispatch = useDispatch()\n  const cart = useSelector( (state) => state.cart )\n\n  const { cartItems } = cart\n\n  const qtyChangeHandler = ( id, qty) => {\n    dispatch(addToCart(id, qty))\n  }\n\n  const removeHandler = ( id ) => {\n    dispatch(removeFromCart(id))\n  }\n// cart count will update if number of items is changed by user\n  const getCartCount = () => {\n    return cartItems.reduce(( qty, item ) => Number(item.qty) + qty, 0)\n  }\n\n  //calculate subtotal price\n  const cartSubtotal = () => {\n    return cartItems.reduce((price, item) => item.price * item.qty + price, 0)\n  }\n \n  return (\n    <>\n    <div className='cartscreen'>\n        \n        <div className='cartscreen__left'>\n          <h2>Shopping Cart</h2>\n          {cartItems.length === 0 ? (\n            <div>\n              Your cart is currently empty \n              <Link className='return_to_shop' to='/'> Return to Shop </Link>\n            </div>\n          ) : (\n            cartItems.map((item) => (\n            <CartItem\n            key={item.product}  \n            item={item}\n            qtyChangeHandler={ qtyChangeHandler }\n            removeHandler={ removeHandler }/>\n            ))\n          )}\n        \n        </div>\n        <div className='cartscreen__right'>\n          <div className='cartscreen_info'>\n            <p>Subtotal ({getCartCount()})  items  </p>\n            \n            <p>${cartSubtotal().toFixed(2)}</p>\n          </div>\n          <div>\n            <button className='checkoutBtn'>Pay/Checkout</button>\n            </div>\n        </div>\n       </div>\n     </>   \n  \n  )\n}\n\nexport default CartScreen","\nimport './App.css';\nimport { useState } from 'react'\nimport { BrowserRouter as Router, Switch, Route} from 'react-router-dom'\n\n//components\nimport Navbar from './components/Navbar';\nimport Backdrop from './components/Backdrop';\nimport SideDrawer from './components/SideDrawer';\n\n//Screens\nimport HomeScreen from './screens/HomeScreen';\nimport ProductScreen from './screens/ProductScreen';\nimport CartScreen from './screens/CartScreen';\n\nfunction App() {\n\n  // initializing state logic to toggle sidedrawer...click on backdrop and sidedrawer closes, click on hamburger and sidedrawer opens\n  const [sideToggle, setSideToggle] = useState(false)\n\n  return (\n\n    \n\n    <Router>\n      \n     {/* {Navbar} */}\n     <Navbar click={() => setSideToggle(true)}/>\n     {/* {SideDrawer} */}\n     <SideDrawer show={sideToggle} click={() => setSideToggle(false)} />\n     {/* {Backdrop} */}\n     <Backdrop show={sideToggle} click={() => setSideToggle(false)} /> \n      <main>\n        <Switch>\n          <Route exact path ='/' component={HomeScreen}/>\n          <Route exact path = '/product/:id' component={ProductScreen}   />\n          <Route  exact path = '/cart' component={CartScreen}/>\n        </Switch>\n      </main>\n\n     {/* {HomeScreen} */}\n     {/* {ProductScreen} */}\n     {/* {CartScreen} */}\n     \n      \n  \n  </Router>\n   \n  );\n}\n\nexport default App;\n ","\n//get access to the action types created in the cart constants\nimport * as actionTypes from '../constants/cartConstant'\n\nconst CART_INITIAL_STATE = {\n    cartItems: []\n}\n\n// set default state and check action types\nexport const cartReducer = (state = CART_INITIAL_STATE, action) => {\n    switch(action.type) {\n        case actionTypes.ADD_TO_CART:\n            const item = action.payload\n\n        //check if product id is found in our items in our cart\n        const existItem = state.cartItems.find((x) => x.product === item.product)\n\n        //x = current item being mapped through\n\n        // if we find the new existing item in the product array (from the action.payload item above) we add the new array (.map array method creates a new array) it to the old array = the cart\n        if(existItem) {\n            return {\n                ...state,\n                cartItems: state.cartItems.map((x) => x.product === existItem.product ? item : x)\n            }\n        } else {\n            return {\n                ...state,\n                cartItems: [...state.cartItems, item ]\n            }\n\n        } \n        \n        case actionTypes.REMOVE_FROM_CART:\n            return {\n                ...state,\n                cartItems: state.cartItems.filter((x) => x.product !== action.payload)\n            }\n        \n        \n        default:\n            return state\n    } \n\n}","import { createStore, combineReducers , applyMiddleware }  from 'redux'\nimport thunk from 'redux-thunk'\nimport { composeWithDevTools } from 'redux-devtools-extension'\n// composeWithDevTools = enhancer for the store and reducers\n\n\n//reducers\nimport { cartReducer } from './reducers /cartReducers'\nimport { getProductsReducer, getProductDetailsReducer  } from './reducers /productReducers'\n\nconst reducer = combineReducers({\n    cart: cartReducer,   //cartReducer is added to the value of cart and is now in the store as state\n    getProducts: getProductsReducer,\n    getProductDetails: getProductDetailsReducer\n})\n//creating array of all middleware, \n// in this app we have one (thunk) which helps maake async requests in our actions\nconst middleware = [thunk] \n\n//initial value for cart items to persist in local storage\nconst cartLocalStorage = localStorage.getItem(\"cart\") ? JSON.parse(localStorage.getItem('cart')) : []\n\nconst INITIAL_STATE = {\n    cart: {\n        cartItems : cartLocalStorage\n    }\n}\n\nconst store = createStore(\n    reducer,\n    INITIAL_STATE,\n    composeWithDevTools(applyMiddleware(...middleware))\n)\n\nexport default store","import * as actionTypes from '../constants/productConstants'\n\n// get all products\n\nexport const getProductsReducer = (state = { products: []}, action) => {\n    switch( action.type) {\n        case actionTypes.GET_PRODUCTS_REQUEST:\n            return {\n                // allows app to wait for the data to load, making the loading equal to false(beacuse its done loading) and not crash\n                loading: true,\n                products: []\n         }\n         case actionTypes.GET_PRODUCTS_SUCCESS:\n            return {\n                loading:false,\n                products: action.payload\n            }\n        case actionTypes.GET_PRODUCTS_FAIL:\n            return {\n                loading:false,\n                error: action.payload\n            }\n\n            default:\n                return state\n\n\n    }    \n}\n\n\n//get one product\nexport const getProductDetailsReducer = (state = { product : {}}, action) => {\n    switch( action.type) { \n        case actionTypes.GET_PRODUCT_DETAILS_REQUEST:\n            return {\n                loading: true,\n            }\n        case actionTypes.GET_PRODUCT_DETAILS_SUCCESS:\n            return {\n                loading: false,\n                product: action.payload\n            }    \n        case actionTypes.GET_PRODUCT_DETAILS_FAIL:\n            return {\n                loading: false,\n                error: action.payload\n            }\n        case actionTypes.GET_PRODUCT_DETAILS_RESET:\n            return {\n                product: {}\n            }\n        default:\n            return state\n\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\n\n//provides entire application access to the state in our store\nimport { Provider } from 'react-redux'\nimport store from './redux/store'\n \n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <Provider store={store}>\n     <React.StrictMode>\n    <App />\n  </React.StrictMode>\n\n  </Provider>\n \n);\n\n"],"sourceRoot":""}